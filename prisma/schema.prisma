// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  password            String
  name                String
  gender              Gender
  birthDate           DateTime
  height              Float?
  weight              Float?
  smoking             Boolean   @default(false)
  drinkingFrequency   String?
  chronicDisease      String?
  medications         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  diagnosisRecords          DiagnosisRecord[]
  supplementRecommendations SupplementRecommendation[]
  hospitalRecommendations   HospitalRecommendation[]
}

enum Gender {
  M
  F
}


model DiagnosisRecord {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [userId], references: [id])
  userId                Int

  symptoms              String
  diagnosisResult       String
  departments           String?

  heightAtDiagnosis     Float?
  weightAtDiagnosis     Float?
  smokingAtDiagnosis    Boolean  @default(false)
  drinkingFrequencyAtDiagnosis String?
  chronicDiseaseAtDiagnosis     String?
  medicationsAtDiagnosis        String?

  createdAt             DateTime @default(now())

  // Relations
  supplementRecommendations SupplementRecommendation[]
  hospitalRecommendations   HospitalRecommendation[]
}


model SupplementRecommendation {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [userId], references: [id])
  userId                Int

  diagnosisRecord       DiagnosisRecord? @relation(fields: [basedOnDiagnosisId], references: [id])
  basedOnDiagnosisId    Int?

  recommendations       String
  createdAt             DateTime @default(now())
}


model HospitalRecommendation {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [userId], references: [id])
  userId                Int

  diagnosisRecord       DiagnosisRecord? @relation(fields: [basedOnDiagnosisId], references: [id])
  basedOnDiagnosisId    Int?

  location              String?
  recommendedHospitals  String
  createdAt             DateTime @default(now())
}
